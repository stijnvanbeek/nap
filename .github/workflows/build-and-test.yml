# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Build and test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Install prerequisites
      shell: bash
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update --fix-missing
        sudo apt install -f
        sudo apt install -y libx11-dev mesa-vulkan-drivers build-essential libxcb-xinerama0 libxcb-cursor0 libglu1-mesa-dev libxkbcommon-dev xvfb

    - name: Install Vulkan SDK
      if: matrix.os == 'windows-latest'
      uses: jakoch/install-vulkan-sdk-action@v1
      with:
        # You can set the Vulkan SDK version to download.
        # Defaults to latest version, if version not set.
        vulkan_version: 1.3.231.1
        optional_components: com.lunarg.vulkan.vma
        install_runtime: true
        cache: true
        stripdown: false
        # You can install a software rasterizer.
        install_swiftshader: true
        install_lavapipe: true

#    - name: Prepare Vulkan SDK for windows
#      if: matrix.os == 'windows-latest'
#      uses: humbletim/setup-vulkan-sdk@v1.2.1
#      with:
#        vulkan-query-version: 1.4.304.1
#        vulkan-components: Vulkan-Headers, Vulkan-Loader
#        vulkan-use-cache: true

    - name: Check build environment
      shell: bash
      run: sh check_build_environment.sh

    - name: Build and test linux
      shell: bash
      if: matrix.os == 'ubuntu-latest'
      run: xvfb-run sh package_app.sh helloworld -b build -t -d

    - name: Build and test win
      shell: bash
      if: matrix.os == 'windows-latest'
      run: sh package_app.sh helloworld -b build -t -d

    - name: Build and test macos
      shell: bash
      if: matrix.os == 'macos-latest'
      run: sh package_app.sh helloworld -b build -t -d


